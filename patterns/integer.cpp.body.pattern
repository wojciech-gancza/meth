${#include "common.to.string.pattern"}

${class_name} ${class_name}::fromString(const std::string& text)
{
  std::istringstream string_representation(text);
  ${int_class} ${object_name} = 0;
  string_representation >> ${object_name};
  if (!string_representation.eof())
  {
    throw Common::ConversionError(text, "cannot be interpreted as ${"::".join(namespaces)}::${class_name}");
  }
  return ${class_name}(${object_name});
}

std::ostream& operator<<(std::ostream& output, const ${class_name}& ${object_name})
{
  output << ${object_name}.m_${object_name};
  return output;
}

// vvv--- YOU CAN PUT ADDITIONAL CODE BELOW

// ^^^--- END OF USER DEFINED CODE

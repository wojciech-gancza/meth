${#if compareable}bool ${class_name}::operator==(const ${class_name}& ${object_name}) const noexcept 
{ 
  return false;
}

bool ${class_name}::operator!=(const ${class_name}& ${object_name}) const noexcept  
{ 
  return false;
}
${#else}// No compare operators${#end}
${#if ordered}bool ${class_name}::operator<(const ${class_name}& ${object_name}) const noexcept 
{ 
  return false;
}

bool ${class_name}::operator<=(const ${class_name}& ${object_name}) const noexcept 
{ 
  return false;
}

bool ${class_name}::operator>=(const ${class_name}& ${object_name}) const noexcept 
{ 
  return false;
}

bool ${class_name}::operator>(const ${class_name}& ${object_name}) const noexcept 
{ 
  return false;
}
${#else}// No ordering operators${#end}

${#include "common.to.string.pattern"}

std::ostream& operator<<(std::ostream& output, const ${class_name}& ${object_name})
{
  
  
  
  return output;
}

Serialization::BinarySerializer& operator<<(Serialization::BinarySerializer& serializer, const ${class_name}& ${object_name})
{
  
  
  
  return serializer;
}

Serialization::BinaryDeserializer& operator>>(Serialization::BinaryDeserializer& deserializer, ${class_name}& ${object_name})
{
  
  
  
  return deserializer;
}

// vvv--- YOU CAN PUT ADDITIONAL CODE BELOW

// ^^^--- END OF USER DEFINED CODE

class ${class_name}
{
  public:
    explicit ${class_name}(${base_type} ${object_name}) noexcept;
    ${class_name}() noexcept;
    ${class_name}(const ${class_name}& ${object_name}) noexcept;

    ${base_type} get${class_name}AsInteger() const noexcept;
    void set${class_name}(${base_type} ${object_name}) noexcept;

    ${class_name}& operator=(const ${class_name}& ${object_name}) noexcept;

    bool operator==(const ${class_name}& other) const noexcept;
    bool operator!=(const ${class_name}& other) const noexcept;
    bool operator<(const ${class_name}& other) const noexcept;
    bool operator>(const ${class_name}& other) const noexcept;
    bool operator<=(const ${class_name}& other) const noexcept;
    bool operator>=(const ${class_name}& other) const noexcept;

    std::string toString() const;
    static ${class_name} fromString(const std::string& text);

    friend std::ostream& operator<<(std::ostream& out, const ${class_name}& ${object_name});

    friend SerializationInterface& operator<<(SerializationInterface& serializer, const ${class_name}& ${object_name});
    friend DeserializationInterface& operator>>(DeserializationInterface& deserializer, ${class_name}& ${object_name});

  private:
    ${base_type} m_${object_name};
};
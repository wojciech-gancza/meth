class ${class_name}
{
  public:
    // event enum - this is the list of all events
    enum Event
    {
      ${format.comma_separated([event.UPPERCASE_NAME() for event in events])}
    };
    
  private:
    // base class of all possible states
    class State
    {
      public:
        virtual void process_event(Event event, ${class_name}& ${object_name}) {  };

        virtual void on_entry(${class_name}& ${object_name}) {  }
        virtual void on_leave(${class_name}& ${object_name}) {  }
    };
    
    // all possible states
${#for state_class in states}    class ${state_class.name.UppercaseCamelName()} : public State
    {
      public:
${#if state_class.process_event_code}        void process_event(Event event, ${class_name}& ${object_name}) override;
${#end}${#if state_class.process_event_code and (state_class.on_enter or state_class.on_leave)}        
${#end}${#if state_class.on_enter}        virtual void on_entry(${class_name}& ${object_name})   { ${object_name}.${state_class.on_enter}(); }
${#end}${#if state_class.on_leave}        virtual void on_leave(${class_name}& ${object_name})   { ${object_name}.${state_class.on_leave}(); }
${#end}${#if state_class.children}        
${#for child_state in state_class.children}        ${child_state.UppercaseCamelName()} m_${child_state.lowercase_name()};
${#end}${#end}    };

${#end}  public:
    ${class_name}( 
        // vvv--- constructor parameters (if needed)
        
        // ^^^--- constructor parameters (if needed)
        )
      // vvv--- constructing local values (if needed)
      
      // ^^^--- constructint local values (if needed) )
    { 
      reset();
      
      // vvv--- human defined construction (if needed)
      
      // ^^^--- human defined construction (if needed) )
    }
    
    void reset()   { m_current_state = &${initial_state_object_name}; }
    
    void process_event(Event event)   { m_current_state->process_event(event, *this); }
  
  protected:
${#for method in all_methods}    ${#if method[0]}bool${#else}void${#end} ${method[1]}();
${#end}  
  private:
    // all possible states
${#for state_class in states}${#if not state_class.parent}    ${state_class.name.UppercaseCamelName()} m_${state_class.name.lowercase_name()};
${#end}${#end}    
    State* m_current_state = { nullptr };
    
    // vvv--- ${class_name} additional fields and methods
    
    // ^^^--- End of ${class_name} additional fields and methods
};
class ${class_name}
{
  public:
    // event enum - this is the list of all events
    enum Event
    {
      ${format.comma_separated([event.UPPERCASE_NAME() for event in events])}
    };
    
  private:
    // base class of all possible states
    class State
    {
      public:
        virtual void process_event(Event event, ${class_name}& ${object_name}) = 0;
    };
    
    // all possible states
${#for state_class in states}    class ${state_class.name.UppercaseCamelName()} : public State
    {
      public:
        void process_event(Event event, ${class_name}& ${object_name}) override;
    };

${#end}  public:
    ${class_name}( 
        // vvv--- constructor parameters (if needed)
        
        // ^^^--- constructor parameters (if needed)
        )
      ${format.inheritance_list(["m_" + state_class.name.lowercase_name() + "()" for state_class in states])}
      // vvv--- constructing local values (if needed)
      
      // ^^^--- constructint local values (if needed) )
    { 
      // vvv--- human defined construction (if needed)
      
      // ^^^--- human defined construction (if needed) )
      
      reset();
    }
    
    void reset()
    {
      m_current_state = &m_${initial_state.lowercase_name()};
    }
    
    bool process_event(Event event)
    {
      m_current_state->process_event(event, *this);
    }
  
  protected:
${#for action in list_of_actions}    void ${action}();
${#end}  
  private:
    // all possible states
${#for state_class in states}    ${state_class.name.UppercaseCamelName()} m_${state_class.name.lowercase_name()};
${#end}    
    State* m_current_state = { nullptr };
    
    // vvv--- ${class_name} additional fields and methods
    
    // ^^^--- End of ${class_name} additional fields and methods
};
std::string ${class_name}::toString() const
{
  std::ostringstream string_representation;
  string_representation << *this;
  return string_representation.str();
}

${class_name} ${class_name}::fromString(std::string text)
{
  e${class_name} possible_result = convertTextToPossibleEnum(text);
  if (m_${object_name}_names[possible_result] == text)
  {
    return ${class_name}(possible_result);
  }
  else
  {
    throw Common::ConversionError(text, "cannot be interpreted as ${"::".join(namespaces)}::${class_name}");
  }
}

std::ostream& operator<<(std::ostream& output, const ${class_name}& ${object_name})
{
  output << ${class_name}::m_${object_name}_names[${object_name}.m_${object_name}];
  return output;
}

const char* ${class_name}::m_${object_name}_names[] = {
  ${format.comma_separated(['"'+value.UPPERCASE_NAME()+'"' for value in values])}
};

${class_name}::e${class_name} ${class_name}::convertTextToPossibleEnum(const std::string& text) noexcept
{
  ${code_converting_from_string}
}

// -vvv YOU CAN PUT ADDITIONAL CODE BELOW

// -^^^ END OF USER DEFINED CODE

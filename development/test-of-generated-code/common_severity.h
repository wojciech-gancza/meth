// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/test-of-generated-code/common_severity.h
// and it is generated by:      .../test.py[74]
// based on pattern file:       .../patterns/enum.h.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------

#pragma once

#include <cstdint>
#include <string>
#include <iostream>

#include "binary_serialization.h"

namespace Common
{
  class Severity
  {
    public:
      // type traits
      static constexpr const char* class_name = { "Common::Severity" };
      static constexpr bool is_compareable = { true };
      static constexpr bool is_ordered = { true };
      static constexpr bool size_in_bytes = { 1 };
  
      // internal value type
      enum eSeverity : uint8_t 
      {
        E_DATA,
        E_MEMO,
        E_NOTICE,
        E_INFO,
        E_TRACE,
        E_DEBUG,
        E_LOG,
        E_WARNING,
        E_PROBLEM,
        E_ERROR,
        E_FATAL,
        E_DISASTER,
        E_ARMAGEDON
      };
  
      static constexpr eSeverity first_value = { E_DATA };
      static constexpr eSeverity last_value = { E_ARMAGEDON } ;
  
      constexpr Severity(Severity::eSeverity e_severity = Severity::first_value) noexcept
        : m_severity(e_severity)
      {  }
  
      Severity(const Severity& severity) noexcept = default;
      Severity& operator=(const Severity& severity) noexcept = default;
    
      bool operator==(const Severity& severity) const noexcept
      {
        return (m_severity == severity.m_severity);
      }
      
      bool operator!=(const Severity& severity) const noexcept
      {
        return (m_severity != severity.m_severity);
      }
      
      bool operator<(const Severity& severity) const noexcept
      {
        return (m_severity < severity.m_severity);
      }
      
      bool operator<=(const Severity& severity) const noexcept
      {
        return (m_severity <= severity.m_severity);
      }
      
      bool operator>=(const Severity& severity) const noexcept
      {
        return (m_severity >= severity.m_severity);
      }
      
      bool operator>(const Severity& severity) const noexcept
      {
        return (m_severity > severity.m_severity);
      }
    
      std::string toString() const;
      static Severity fromString(std::string text);
      
      friend std::ostream& operator<<(std::ostream& output, const Severity& severity);
  
      friend Serialization::BinarySerializer& operator<<(Serialization::BinarySerializer& output, const Severity& severity)
      {
        output.storeInteger(severity.m_severity);
        return output;
      }
      
      friend Serialization::BinaryDeserializer& operator>>(Serialization::BinaryDeserializer& input, Severity& severity)
      {
        input.readInteger(severity.m_severity);
        return input;
      }
  
    private:
      eSeverity m_severity;
  
      static const char* m_severity_names[];
  
      static eSeverity convertTextToPossibleEnum(const std::string& text) noexcept;
  };
} // end Common

// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/test-of-generated-code/common_delay.cpp
// and it is generated by:      .../test.py[127]
// based on pattern file:       .../patterns/time.duration.cpp.body.pattern
// wrapped by pattern:          .../patterns/common.main.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------


#include "common_delay.h"
#include "common_conversion_error.h"
#include "common_text_converter.h"

// vvv--- YOU CAN PUT ADDITIONAL INCLUDES BELOW

// ^^^--- END OF USER DEFINED INCLUDES

namespace Common
{
  std::string Delay::toString() const
  {
    std::ostringstream string_representation;
    string_representation << *this;
    return string_representation.str();
  }
  
  std::ostream& operator<<(std::ostream& output, const Delay& delay)
  {
    int64_t duration = std::chrono::duration_cast<std::chrono::milliseconds>(delay.m_delay).count();
    if (duration < 0)
    {
      duration = -duration;
      output << "-";
    }
  
    uint64_t minutes = static_cast<uint64_t>(duration / 60000);
    duration = duration % 60000;
    uint64_t seconds = static_cast<uint64_t>(duration / 1000);
    duration = duration % 1000;
    uint64_t milliseconds = static_cast<uint64_t>(duration);
  
    output << std::setw(2) << std::setfill('0') << minutes
           << ":"
           << std::setw(2) << std::setfill('0') << seconds
           << "."
           << std::setw(3) << milliseconds;
  
    return output;
  }
  
  Delay Delay::fromString(const std::string& text)
  {
    TimeDurationType time_duration = {  };
  
    std::string::const_iterator reader = text.begin();
    std::string::const_iterator limit = text.end();
  
    if (reader != limit)
    {
      bool is_negative = false;
      std::string to_convert = text;
  
      if (*reader == '-')
      {
        is_negative = true;
        if (++reader == limit)
        {
          Common::ConversionError(text, "No text to convert.");
        }
      }
  
      time_duration += std::chrono::minutes( Common::TextConverter::readNumber( reader, limit ) );
      Common::TextConverter::ensureStaticTextExist(reader, limit, ":");
      time_duration += std::chrono::seconds( Common::TextConverter::readNumber( reader, limit ) );
      Common::TextConverter::ensureStaticTextExist(reader, limit, ".");
      time_duration += std::chrono::milliseconds( Common::TextConverter::readNumber( reader, limit ) );
  
      if (is_negative)
      {
        time_duration = -time_duration;
      }
    }
    return Delay(time_duration);
  }
    
  // vvv--- YOU CAN PUT ADDITIONAL DEFINITIONS BELOW
  
  // ^^^--- END OF USER DEFINED DEFINITIONS

} // end Common

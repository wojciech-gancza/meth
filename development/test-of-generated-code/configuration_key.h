// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/test-of-generated-code/configuration_key.h
// and it is generated by:      .../test.py[143]
// based on pattern file:       .../patterns/string.h.body.pattern
// wrapped by pattern:          .../patterns/common.main.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------

#pragma once

#include <cstdint>
#include <string>
#include <iostream>

#include "common_strcmp_compare.h"
#include "common_conversion_error.h"
#include "serialization_binary_serialization.h"

// vvv--- YOU CAN PUT ADDITIONAL INCLUDES BELOW

// ^^^--- END OF USER DEFINED INCLUDES

namespace Configuration
{
  class Key
  {
    public:
      // type traits
      static constexpr const char* class_name = { "Configuration::Key" };
      static constexpr bool is_compareable = { true };
      static constexpr bool is_ordered = { true };
      static constexpr uint8_t max_length = { 255 };
  
      explicit Key(const char* key)
      : m_key(key)
      {  }
  
      explicit Key(std::string&& key)
      : m_key(key)
      {  }
  
      Key() noexcept
      : m_key("")
      {  }
      
      constexpr explicit Key(const std::string& key) noexcept
      : m_key(key)
      {  }
      
      Key(const Key& key) noexcept = default;
      Key(Key&& key) noexcept = default;
      Key& operator=(const Key& key) noexcept = default;
      Key& operator=(Key&& key) noexcept = default;
  
      std::string getKeyAsString() const noexcept { return m_key; }
  
      const Key& getKey() const noexcept { return *this; }
      
      void setKey(const Key& key) { *this = key; }
      void setKey(const std::string& key) { *this = Key(key); }
      void setFrom(const Key& key) { *this = key; }
      void setFrom(Key&& key) { *this = key; }
      void setTextMessage(const char* text_message) { *this = Key(text_message); }
  
      uint8_t getKeyLength() const { return static_cast<uint8_t>(m_key.length()); }
  
      bool operator==(const Key& other) const noexcept { return Common::StrcmpCompare::isEqual(this->m_key, other.m_key); }
      bool operator!=(const Key& other) const noexcept { return Common::StrcmpCompare::isNotEqual(this->m_key, other.m_key); }
      bool operator<(const Key& other) const noexcept { return Common::StrcmpCompare::isLower(this->m_key, other.m_key); }
      bool operator<=(const Key& other) const noexcept { return Common::StrcmpCompare::isLowerOrEqual(this->m_key, other.m_key); }
      bool operator>=(const Key& other) const noexcept { return Common::StrcmpCompare::isAboveOrEqual(this->m_key, other.m_key); }
      bool operator>(const Key& other) const noexcept { return Common::StrcmpCompare::isAbove(this->m_key, other.m_key); }
  
      std::string toString() const;
  
      friend std::ostream& operator<<(std::ostream& output, const Key& key) { output << key.toString(); return output; }
  
      friend Serialization::BinarySerializer& operator<<(Serialization::BinarySerializer& output, const Key& key);
      friend Serialization::BinaryDeserializer& operator>>(Serialization::BinaryDeserializer& input, Key& key);
  
    private:
      std::string m_key;
  
      void checkSize()
      {
        // vvv--- YOU CAN PUT VALUE CHECK HANDLING HERE
        if (getKeyLength() > max_length)
        {
          throw Common::ConversionError(m_key, "too long string to initiate Configuration::Key");
        }
        // ^^^--- END OF VALUE CHECK HANDLING HERE
      }
  
      // vvv--- YOU CAN PUT ADDITIONAL CLASS ELEMENTS BELOW
  
      // ^^^--- END OF USER DEFINED CLASS ELEMENTS
  };
} // end Configuration

// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/test-of-generated-code/common_severity.cpp
// and it is generated by:      .../generator.py[180]
// based on pattern file:       .../patterns/enum.cpp.body.pattern
// wrapped by pattern:          .../patterns/common.main.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------

#include <sstream>
#include "common_severity.h"
#include "common_conversion_error.h"

// vvv--- YOU CAN PUT ADDITIONAL INCLUDES BELOW

// ^^^--- END OF USER DEFINED INCLUDES

namespace Common
{
  std::string Severity::toString() const
  {
    std::ostringstream string_representation;
    string_representation << *this;
    return string_representation.str();
  }
  
  Severity Severity::fromString(const std::string& text)
  {
    eSeverity possible_result = convertTextToPossibleEnum(text);
    if (m_severity_names[possible_result] == text)
    {
      return Severity(possible_result);
    }
    else
    {
      throw Common::ConversionError(text, "cannot be interpreted as Common::Severity");
    }
  }
  
  std::ostream& operator<<(std::ostream& output, const Severity& severity)
  {
    output << Severity::m_severity_names[severity.m_severity];
    return output;
  }
  
  const char* Severity::m_severity_names[] = {
    "DATA",
    "MEMO",
    "NOTICE",
    "INFO",
    "TRACE",
    "DEBUG",
    "LOG",
    "WARNING",
    "PROBLEM",
    "ERROR",
    "FATAL",
    "DISASTER",
    "ARMAGEDON"
  };
  
  Severity::eSeverity Severity::convertTextToPossibleEnum(const std::string& text) noexcept
  {
    if (text.length() < 3)
    {
      return E_ARMAGEDON;
    }
    switch (text[0])
    {
      case 'A':
        return E_ARMAGEDON;
      case 'D':
        if (text.length() < 4)
        {
          return E_DISASTER;
        }
        switch (text[1])
        {
          case 'A':
            return E_DATA;
          case 'E':
            return E_DEBUG;
          default:
          {
            return E_DISASTER;
          }
        }
      case 'E':
        return E_ERROR;
      case 'F':
        return E_FATAL;
      case 'I':
        return E_INFO;
      case 'L':
        return E_LOG;
      case 'M':
        return E_MEMO;
      case 'N':
        return E_NOTICE;
      case 'P':
        return E_PROBLEM;
      case 'T':
        return E_TRACE;
      default:
      {
        return E_WARNING;
      }
    }
  }
  
  // vvv--- YOU CAN PUT ADDITIONAL CODE BELOW
  
  // ^^^--- END OF USER DEFINED CODE

} // end Common

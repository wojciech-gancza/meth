// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/test-of-generated-code/test_another_record.cpp
// and it is generated by:      .../test.py[108]
// based on pattern file:       .../patterns/record.cpp.body.pattern
// wrapped by pattern:          .../patterns/source.main.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------

#include <sstream>

#include "test_another_record.h"
#include "common_conversion_error.h"
#include "common_record_fields_comparision.h"

// -vvv YOU CAN PUT ADDITIONAL INCLUDES BELOW

// -^^^ END OF USER DEFINED INCLUDES

namespace Test
{
  // No compare operators
  
  // No ordering operators
  
  std::string AnotherRecord::toString() const
  {
    std::ostringstream string_representation;
    string_representation << *this;
    return string_representation.str();
  }
  
  std::ostream& operator<<(std::ostream& output, const AnotherRecord& another_record)
  {
    output << "{ " 
           << "common_severity: " << static_cast<const Common::Severity&>(another_record) << ", "
           << "common_network_port_number: " << static_cast<const Common::Network::PortNumber&>(another_record)
           << " }";
    return output;
  }
  
  Serialization::BinarySerializer& operator<<(Serialization::BinarySerializer& serializer, const AnotherRecord& another_record)
  {
    serializer << static_cast<const Common::Severity&>(another_record);
    serializer << static_cast<const Common::Network::PortNumber&>(another_record);
    return serializer;
  }
  
  Serialization::BinaryDeserializer& operator>>(Serialization::BinaryDeserializer& deserializer, AnotherRecord& another_record)
  {
    deserializer >> static_cast<Common::Severity&>(another_record);
    deserializer >> static_cast<Common::Network::PortNumber&>(another_record);
    return deserializer;
  }
  
  // -vvv YOU CAN PUT ADDITIONAL CLASS ELEMENTS BELOW
  
  // -^^^ END OF USER DEFINED CLASS ELEMENTS

} // end Test

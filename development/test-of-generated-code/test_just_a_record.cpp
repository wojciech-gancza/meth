// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/test-of-generated-code/test_just_a_record.cpp
// and it is generated by:      .../generator.py[222]
// based on pattern file:       .../patterns/record.cpp.body.pattern
// wrapped by pattern:          .../patterns/common.main.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------

#include <sstream>
#include "test_just_a_record.h"
#include "common_conversion_error.h"
#include "common_record_fields_comparision.h"

// vvv--- YOU CAN PUT ADDITIONAL INCLUDES BELOW

// ^^^--- END OF USER DEFINED INCLUDES

namespace Test
{
  bool JustARecord::operator==(const JustARecord& just_a_record) const noexcept
  {
    if (!Common::is_record_field_equal(static_cast<const Common::Severity&>(*this), static_cast<const Common::Severity&>(just_a_record)))
    {
      return false;
    }
    if (!Common::is_record_field_equal(static_cast<const Acoustic::SelectedOutputIds&>(*this), static_cast<const Acoustic::SelectedOutputIds&>(just_a_record)))
    {
      return false;
    }
    if (!Common::is_record_field_equal(static_cast<const Common::Network::PortNumber&>(*this), static_cast<const Common::Network::PortNumber&>(just_a_record)))
    {
      return false;
    }
    return true;
  }
  
  bool JustARecord::operator!=(const JustARecord& just_a_record) const noexcept
  {
    if (Common::is_record_field_not_equal(static_cast<const Common::Severity&>(*this), static_cast<const Common::Severity&>(just_a_record)))
    {
      return true;
    }
    if (Common::is_record_field_not_equal(static_cast<const Acoustic::SelectedOutputIds&>(*this), static_cast<const Acoustic::SelectedOutputIds&>(just_a_record)))
    {
      return true;
    }
    if (Common::is_record_field_not_equal(static_cast<const Common::Network::PortNumber&>(*this), static_cast<const Common::Network::PortNumber&>(just_a_record)))
    {
      return true;
    }
    return false;
  }
  
  bool JustARecord::operator<(const JustARecord& just_a_record) const noexcept
  {
    if (Common::is_ordered_record_field_not_equal(static_cast<const Common::Severity&>(*this), static_cast<const Common::Severity&>(just_a_record)))
    {
      return (Common::is_record_field_less(static_cast<const Common::Severity&>(*this), static_cast<const Common::Severity&>(just_a_record)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Acoustic::SelectedOutputIds&>(*this), static_cast<const Acoustic::SelectedOutputIds&>(just_a_record)))
    {
      return (Common::is_record_field_less(static_cast<const Acoustic::SelectedOutputIds&>(*this), static_cast<const Acoustic::SelectedOutputIds&>(just_a_record)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Common::Network::PortNumber&>(*this), static_cast<const Common::Network::PortNumber&>(just_a_record)))
    {
      return (Common::is_record_field_less(static_cast<const Common::Network::PortNumber&>(*this), static_cast<const Common::Network::PortNumber&>(just_a_record)));
    }
    return false;
  }
  
  bool JustARecord::operator<=(const JustARecord& just_a_record) const noexcept
  {
    if (Common::is_ordered_record_field_not_equal(static_cast<const Common::Severity&>(*this), static_cast<const Common::Severity&>(just_a_record)))
    {
      return (Common::is_record_field_less(static_cast<const Common::Severity&>(*this), static_cast<const Common::Severity&>(just_a_record)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Acoustic::SelectedOutputIds&>(*this), static_cast<const Acoustic::SelectedOutputIds&>(just_a_record)))
    {
      return (Common::is_record_field_less(static_cast<const Acoustic::SelectedOutputIds&>(*this), static_cast<const Acoustic::SelectedOutputIds&>(just_a_record)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Common::Network::PortNumber&>(*this), static_cast<const Common::Network::PortNumber&>(just_a_record)))
    {
      return (Common::is_record_field_less(static_cast<const Common::Network::PortNumber&>(*this), static_cast<const Common::Network::PortNumber&>(just_a_record)));
    }
    return true;
  }
  
  bool JustARecord::operator>=(const JustARecord& just_a_record) const noexcept
  {
    if (Common::is_ordered_record_field_not_equal(static_cast<const Common::Severity&>(*this), static_cast<const Common::Severity&>(just_a_record)))
    {
      return (Common::is_record_field_greater(static_cast<const Common::Severity&>(*this), static_cast<const Common::Severity&>(just_a_record)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Acoustic::SelectedOutputIds&>(*this), static_cast<const Acoustic::SelectedOutputIds&>(just_a_record)))
    {
      return (Common::is_record_field_greater(static_cast<const Acoustic::SelectedOutputIds&>(*this), static_cast<const Acoustic::SelectedOutputIds&>(just_a_record)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Common::Network::PortNumber&>(*this), static_cast<const Common::Network::PortNumber&>(just_a_record)))
    {
      return (Common::is_record_field_greater(static_cast<const Common::Network::PortNumber&>(*this), static_cast<const Common::Network::PortNumber&>(just_a_record)));
    }
    return true;
  }
  
  bool JustARecord::operator>(const JustARecord& just_a_record) const noexcept
  {
    if (Common::is_ordered_record_field_not_equal(static_cast<const Common::Severity&>(*this), static_cast<const Common::Severity&>(just_a_record)))
    {
      return (Common::is_record_field_greater(static_cast<const Common::Severity&>(*this), static_cast<const Common::Severity&>(just_a_record)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Acoustic::SelectedOutputIds&>(*this), static_cast<const Acoustic::SelectedOutputIds&>(just_a_record)))
    {
      return (Common::is_record_field_greater(static_cast<const Acoustic::SelectedOutputIds&>(*this), static_cast<const Acoustic::SelectedOutputIds&>(just_a_record)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Common::Network::PortNumber&>(*this), static_cast<const Common::Network::PortNumber&>(just_a_record)))
    {
      return (Common::is_record_field_greater(static_cast<const Common::Network::PortNumber&>(*this), static_cast<const Common::Network::PortNumber&>(just_a_record)));
    }
    return false;
  }
  
  std::string JustARecord::toString() const
  {
    std::ostringstream string_representation;
    string_representation << *this;
    return string_representation.str();
  }
  
  std::ostream& operator<<(std::ostream& output, const JustARecord& just_a_record)
  {
    output << "{ " 
           << "common_severity: " << static_cast<const Common::Severity&>(just_a_record) << ", "
           << "acoustic_selected_output_ids: " << static_cast<const Acoustic::SelectedOutputIds&>(just_a_record) << ", "
           << "common_network_port_number: " << static_cast<const Common::Network::PortNumber&>(just_a_record)
           << " }";
    return output;
  }
  
  Serialization::BinarySerializer& operator<<(Serialization::BinarySerializer& serializer, const JustARecord& just_a_record)
  {
    serializer << static_cast<const Common::Severity&>(just_a_record);
    serializer << static_cast<const Acoustic::SelectedOutputIds&>(just_a_record);
    serializer << static_cast<const Common::Network::PortNumber&>(just_a_record);
    return serializer;
  }
  
  Serialization::BinaryDeserializer& operator>>(Serialization::BinaryDeserializer& deserializer, JustARecord& just_a_record)
  {
    deserializer >> static_cast<Common::Severity&>(just_a_record);
    deserializer >> static_cast<Acoustic::SelectedOutputIds&>(just_a_record);
    deserializer >> static_cast<Common::Network::PortNumber&>(just_a_record);
    return deserializer;
  }
  
  // vvv--- YOU CAN PUT ADDITIONAL CLASS ELEMENTS BELOW
  
  // ^^^--- END OF USER DEFINED CLASS ELEMENTS

} // end Test

// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/test-of-generated-code/test_the_door.h
// and it is generated by:      .../test.py[102]
// based on pattern file:       .../patterns/state.machine.h.body.pattern
// wrapped by pattern:          .../patterns/common.main.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------

#pragma once


// vvv--- YOU CAN PUT ADDITIONAL INCLUDES BELOW

// ^^^--- END OF USER DEFINED INCLUDES

namespace Test
{
  class TheDoor
  {
    public:
      // event enum - this is the list of all events
      enum Event
      {
        E_UNLOCK,
        E_OPEN,
        E_CLOSE,
        E_LOCK
      };
      
    private:
      // base class of all possible states
      class State
      {
        public:
          virtual void process_event(Event event, TheDoor& the_door) = 0;
      };
      
      // all possible states
      class Closed : public State
      {
        public:
          void process_event(Event event, TheDoor& the_door) override;
      };
  
      class Opened : public State
      {
        public:
          void process_event(Event event, TheDoor& the_door) override;
      };
  
      class Locked : public State
      {
        public:
          void process_event(Event event, TheDoor& the_door) override;
      };
  
    public:
      TheDoor( 
          // vvv--- constructor parameters (if needed)
          
          // ^^^--- constructor parameters (if needed)
          )
        : m_closed()
        , m_opened()
        , m_locked()
        // vvv--- constructing local values (if needed)
        
        // ^^^--- constructint local values (if needed) )
      { 
        // vvv--- human defined construction (if needed)
        
        // ^^^--- human defined construction (if needed) )
        
        reset();
      }
      
      void reset()
      {
        m_current_state = &m_opened;
      }
      
      bool process_event(Event event)
      {
        m_current_state->process_event(event, *this);
      }
      
    private:
      // all possible states
      Closed m_closed;
      Opened m_opened;
      Locked m_locked;
      
      State* m_current_state = { nullptr };
      
      // vvv--- TheDoor additional fields and methods
      
      // ^^^--- End of TheDoor additional fields and methods
  };
} // end Test

// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/test-of-generated-code/test_the_door.h
// and it is generated by:      .../test.py[118]
// based on pattern file:       .../patterns/state.machine.h.body.pattern
// wrapped by pattern:          .../patterns/common.main.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------

#pragma once


// vvv--- YOU CAN PUT ADDITIONAL INCLUDES BELOW

#include <sstream>

// ^^^--- END OF USER DEFINED INCLUDES

namespace Test
{
  class TheDoor
  {
    public:
      // event enum - this is the list of all events
      enum Event
      {
        UNLOCK,
        OPEN,
        CLOSE,
        LOCK
      };
      
    private:
      // base class of all possible states
      class State
      {
        public:
          virtual void process_event(Event event, TheDoor& the_door) {  };
  
          virtual void on_entry(TheDoor& the_door) {  }
          virtual void on_leave(TheDoor& the_door) {  }
      };
      
      // all possible states
      class Closed : public State
      {
        public:
          void process_event(Event event, TheDoor& the_door) override;
      };
  
      class Opened : public State
      {
        public:
          void process_event(Event event, TheDoor& the_door) override;
          
          virtual void on_leave(TheDoor& the_door)   { the_door.do_not_allow_to_enter(); }
      };
  
      class Locked : public State
      {
        public:
          void process_event(Event event, TheDoor& the_door) override;
          
          virtual void on_entry(TheDoor& the_door)   { the_door.lock_with_key(); }
      };
  
      class Broken : public State
      {
        public:
          virtual void on_entry(TheDoor& the_door)   { the_door.opened_with_force(); }
      };
  
      class Operatable : public State
      {
        public:
          virtual void on_leave(TheDoor& the_door)   { the_door.call_for_repair(); }
          
          Closed m_closed;
          Opened m_opened;
          Locked m_locked;
      };
  
    public:
      TheDoor( 
          // vvv--- constructor parameters (if needed)
          
          // ^^^--- constructor parameters (if needed)
          )
        // vvv--- constructing local values (if needed)
        
        // ^^^--- constructint local values (if needed) )
      { 
        reset();
        
        // vvv--- human defined construction (if needed)
        
        // ^^^--- human defined construction (if needed) )
      }
      
      void reset()   { m_current_state = &m_operatable.m_opened; }
      
      bool process_event(Event event)   { m_current_state->process_event(event, *this); }
    
    protected:
      void call_for_repair();
      void do_not_allow_to_enter();
      bool key_match();
      void lock_with_key();
      void opened_with_force();
      void turn_the_knob_and_pull();
      bool use_crowbar();
    
    private:
      // all possible states
      Broken m_broken;
      Operatable m_operatable;
      
      State* m_current_state = { nullptr };
      
      // vvv--- TheDoor additional fields and methods

      std::ostringstream m_buffer;
      bool m_have_crowbar = { false }; 
      bool m_have_key = { false };

    public:
      std::string get_state_history() { return m_buffer.str(); }

      void handle_crowbar() { m_have_crowbar = true; m_have_key = false; }
      void handle_key() { m_have_crowbar = false; m_have_key = true; }

      // ^^^--- End of TheDoor additional fields and methods
  };
} // end Test

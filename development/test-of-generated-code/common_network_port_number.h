// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/test-of-generated-code/common_network_port_number.h
// and it is generated by:      .../test.py[95]
// based on pattern file:       .../patterns/integer.h.body.pattern
// wrapped by pattern:          .../patterns/source.main.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------

#pragma once

#include <cstdint>
#include <string>
#include <iostream>

#include "serialization_binary_serialization.h"

// -vvv YOU CAN PUT ADDITIONAL INCLUDES BELOW

// -^^^ END OF USER DEFINED INCLUDES

namespace Common
{
  namespace Network
  {
    class PortNumber
    {
      public:
        // type traits
        static constexpr const char* class_name = { "Common::Network::PortNumber" };
        static constexpr bool is_compareable = { true };
        static constexpr bool is_ordered = { true };
        static constexpr uint8_t size_in_bytes = { 2 };
    
        constexpr PortNumber() noexcept
          : m_port_number(0)
        {  }
    
        constexpr explicit PortNumber( uint16_t port_number ) noexcept
          : m_port_number(port_number)
        {  }
    
        PortNumber(const PortNumber& port_number) noexcept = default;
        PortNumber(PortNumber&& port_number) noexcept = default;
        PortNumber& operator=(const PortNumber& port_number) noexcept = default;
        PortNumber& operator=(PortNumber&& port_number) noexcept = default;
    
        void setPortNumber(uint16_t port_number) noexcept { m_port_number = port_number; }
        void setPortNumber(const PortNumber& port_number) noexcept{ *this = port_number; }
        void setFrom(const PortNumber& port_number) noexcept { *this = port_number; }
        void setFrom(PortNumber&& port_number) noexcept { *this = port_number; }
        
        const PortNumber& getPortNumber() const noexcept { return *this; }
        uint16_t getPortNumberAsInt() const noexcept { return m_port_number; }
    
        bool operator==(const PortNumber& port_number) const noexcept { return (m_port_number == port_number.m_port_number); }
        bool operator!=(const PortNumber& port_number) const noexcept { return (m_port_number != port_number.m_port_number);}
        bool operator<(const PortNumber& port_number) const noexcept { return (m_port_number < port_number.m_port_number); }
        bool operator<=(const PortNumber& port_number) const noexcept { return (m_port_number <= port_number.m_port_number); }
        bool operator>=(const PortNumber& port_number) const noexcept { return (m_port_number >= port_number.m_port_number); }
        bool operator>(const PortNumber& port_number) const noexcept { return (m_port_number > port_number.m_port_number); }
      
        std::string toString() const;
        static PortNumber fromString(std::string text);
        
        friend std::ostream& operator<<(std::ostream& output, const PortNumber& port_number);
    
        friend Serialization::BinarySerializer& operator<<(Serialization::BinarySerializer& output, const PortNumber& port_number)
        {
          output.storeValue(port_number.m_port_number);
          return output;
        }
        
        friend Serialization::BinaryDeserializer& operator>>(Serialization::BinaryDeserializer& input, PortNumber& port_number)
        {
          input.readValue(port_number.m_port_number);
          return input;
        }
    
      private:
        uint16_t m_port_number;
    
        // -vvv YOU CAN PUT ADDITIONAL CLASS ELEMENTS BELOW
    
        // -^^^ END OF USER DEFINED CLASS ELEMENTS
    };
  } // end Network
} // end Common

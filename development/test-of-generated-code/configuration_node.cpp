// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/test-of-generated-code/configuration_node.cpp
// and it is generated by:      .../test.py[154]
// based on pattern file:       .../patterns/record.cpp.body.pattern
// wrapped by pattern:          .../patterns/common.main.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------

#include <sstream>

#include "configuration_node.h"
#include "common_conversion_error.h"
#include "common_record_fields_comparision.h"

// vvv--- YOU CAN PUT ADDITIONAL INCLUDES BELOW

// ^^^--- END OF USER DEFINED INCLUDES

namespace Configuration
{
  bool Node::operator==(const Node& node) const noexcept
  {
    if (!Common::is_record_field_equal(static_cast<const Configuration::Key&>(*this), static_cast<const Configuration::Key&>(node)))
    {
      return false;
    }
    if (!Common::is_record_field_equal(static_cast<const Configuration::Value&>(*this), static_cast<const Configuration::Value&>(node)))
    {
      return false;
    }
    if (!Common::is_record_field_equal(static_cast<const Configuration::Nodes&>(*this), static_cast<const Configuration::Nodes&>(node)))
    {
      return false;
    }
    return true;
  }
  
  bool Node::operator!=(const Node& node) const noexcept
  {
    if (Common::is_record_field_not_equal(static_cast<const Configuration::Key&>(*this), static_cast<const Configuration::Key&>(node)))
    {
      return true;
    }
    if (Common::is_record_field_not_equal(static_cast<const Configuration::Value&>(*this), static_cast<const Configuration::Value&>(node)))
    {
      return true;
    }
    if (Common::is_record_field_not_equal(static_cast<const Configuration::Nodes&>(*this), static_cast<const Configuration::Nodes&>(node)))
    {
      return true;
    }
    return false;
  }
  
  bool Node::operator<(const Node& node) const noexcept
  {
    if (Common::is_ordered_record_field_not_equal(static_cast<const Configuration::Key&>(*this), static_cast<const Configuration::Key&>(node)))
    {
      return (Common::is_record_field_less(static_cast<const Configuration::Key&>(*this), static_cast<const Configuration::Key&>(node)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Configuration::Value&>(*this), static_cast<const Configuration::Value&>(node)))
    {
      return (Common::is_record_field_less(static_cast<const Configuration::Value&>(*this), static_cast<const Configuration::Value&>(node)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Configuration::Nodes&>(*this), static_cast<const Configuration::Nodes&>(node)))
    {
      return (Common::is_record_field_less(static_cast<const Configuration::Nodes&>(*this), static_cast<const Configuration::Nodes&>(node)));
    }
    return false;
  }
  
  bool Node::operator<=(const Node& node) const noexcept
  {
    if (Common::is_ordered_record_field_not_equal(static_cast<const Configuration::Key&>(*this), static_cast<const Configuration::Key&>(node)))
    {
      return (Common::is_record_field_less(static_cast<const Configuration::Key&>(*this), static_cast<const Configuration::Key&>(node)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Configuration::Value&>(*this), static_cast<const Configuration::Value&>(node)))
    {
      return (Common::is_record_field_less(static_cast<const Configuration::Value&>(*this), static_cast<const Configuration::Value&>(node)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Configuration::Nodes&>(*this), static_cast<const Configuration::Nodes&>(node)))
    {
      return (Common::is_record_field_less(static_cast<const Configuration::Nodes&>(*this), static_cast<const Configuration::Nodes&>(node)));
    }
    return true;
  }
  
  bool Node::operator>=(const Node& node) const noexcept
  {
    if (Common::is_ordered_record_field_not_equal(static_cast<const Configuration::Key&>(*this), static_cast<const Configuration::Key&>(node)))
    {
      return (Common::is_record_field_greater(static_cast<const Configuration::Key&>(*this), static_cast<const Configuration::Key&>(node)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Configuration::Value&>(*this), static_cast<const Configuration::Value&>(node)))
    {
      return (Common::is_record_field_greater(static_cast<const Configuration::Value&>(*this), static_cast<const Configuration::Value&>(node)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Configuration::Nodes&>(*this), static_cast<const Configuration::Nodes&>(node)))
    {
      return (Common::is_record_field_greater(static_cast<const Configuration::Nodes&>(*this), static_cast<const Configuration::Nodes&>(node)));
    }
    return true;
  }
  
  bool Node::operator>(const Node& node) const noexcept
  {
    if (Common::is_ordered_record_field_not_equal(static_cast<const Configuration::Key&>(*this), static_cast<const Configuration::Key&>(node)))
    {
      return (Common::is_record_field_greater(static_cast<const Configuration::Key&>(*this), static_cast<const Configuration::Key&>(node)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Configuration::Value&>(*this), static_cast<const Configuration::Value&>(node)))
    {
      return (Common::is_record_field_greater(static_cast<const Configuration::Value&>(*this), static_cast<const Configuration::Value&>(node)));
    }
    if (Common::is_ordered_record_field_not_equal(static_cast<const Configuration::Nodes&>(*this), static_cast<const Configuration::Nodes&>(node)))
    {
      return (Common::is_record_field_greater(static_cast<const Configuration::Nodes&>(*this), static_cast<const Configuration::Nodes&>(node)));
    }
    return false;
  }
  
  std::string Node::toString() const
  {
    std::ostringstream string_representation;
    string_representation << *this;
    return string_representation.str();
  }
  
  std::ostream& operator<<(std::ostream& output, const Node& node)
  {
    output << "{ " 
           << "configuration_key: " << static_cast<const Configuration::Key&>(node) << ", "
           << "configuration_value: " << static_cast<const Configuration::Value&>(node) << ", "
           << "configuration_nodes: " << static_cast<const Configuration::Nodes&>(node)
           << " }";
    return output;
  }
  
  Serialization::BinarySerializer& operator<<(Serialization::BinarySerializer& serializer, const Node& node)
  {
    serializer << static_cast<const Configuration::Key&>(node);
    serializer << static_cast<const Configuration::Value&>(node);
    serializer << static_cast<const Configuration::Nodes&>(node);
    return serializer;
  }
  
  Serialization::BinaryDeserializer& operator>>(Serialization::BinaryDeserializer& deserializer, Node& node)
  {
    deserializer >> static_cast<Configuration::Key&>(node);
    deserializer >> static_cast<Configuration::Value&>(node);
    deserializer >> static_cast<Configuration::Nodes&>(node);
    return deserializer;
  }
  
  // vvv--- YOU CAN PUT ADDITIONAL CLASS ELEMENTS BELOW
  
  // ^^^--- END OF USER DEFINED CLASS ELEMENTS

} // end Configuration

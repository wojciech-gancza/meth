// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/test-of-generated-code/common_event_time.cpp
// and it is generated by:      .../test.py[123]
// based on pattern file:       .../patterns/time.point.cpp.body.pattern
// wrapped by pattern:          .../patterns/common.main.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------


#include "common_event_time.h"
#include "common_conversion_error.h"
#include "common_text_converter.h"

// vvv--- YOU CAN PUT ADDITIONAL INCLUDES BELOW

// ^^^--- END OF USER DEFINED INCLUDES

namespace Common
{
  std::string EventTime::toString() const
  {
    std::ostringstream string_representation;
    string_representation << *this;
    return string_representation.str();
  }
  
  EventTime EventTime::fromString(const std::string& text)
  {
    std::string::const_iterator reader = text.begin();
    std::string::const_iterator limit = text.end();
    int year = Common::TextConverter::readFourDigitsNumber(reader, limit);
    if (year < 1900 || year > 2999)
    {
      Common::ConversionError(text, "Expect number between 1900..2999.");
    }
    Common::TextConverter::ensureStaticTextExist(reader, limit, "-");
    int month = Common::TextConverter::readOneOrTwoDigitsNumber(reader, limit);
    if (month < 1 || month > 12)
    {
      Common::ConversionError(text, "Expect number between 1..12.");
    }
    Common::TextConverter::ensureStaticTextExist(reader, limit, "-");
    int day = Common::TextConverter::readOneOrTwoDigitsNumber(reader, limit);
    if (day < 1 || day > 31)
    {
      Common::ConversionError(text, "Expect number between 1..31.");
    }
    Common::TextConverter::ensureStaticTextExist(reader, limit, " ");
    int hour = Common::TextConverter::readOneOrTwoDigitsNumber(reader, limit);
    if (hour < 0 || hour >= 24)
    {
      Common::ConversionError(text, "Expect number between 0..23.");
    }
    Common::TextConverter::ensureStaticTextExist(reader, limit, ":");
    int minutes = Common::TextConverter::readOneOrTwoDigitsNumber(reader, limit);
    if (minutes < 0 || minutes >= 60)
    {
      Common::ConversionError(text, "Expect number between 0..59.");
    }
    Common::TextConverter::ensureStaticTextExist(reader, limit, ":");
    int seconds = Common::TextConverter::readOneOrTwoDigitsNumber(reader, limit);
    if (seconds < 0 || seconds >= 60)
    {
      Common::ConversionError(text, "Expect number between 0..59.");
    }
    Common::TextConverter::ensureStaticTextExist(reader, limit, ".");
    int milliseconds = Common::TextConverter::readThreeDigitsNumber(reader, limit);
    if (milliseconds < 0 || milliseconds >= 1000)
    {
      Common::ConversionError(text, "Expect number between 0..999.");
    }
    if (reader != limit)
    {
      Common::ConversionError(text, "Extra characters at end of text.");
    }
    
    std::tm tm = { 
      /* .tm_sec  = */ seconds,
      /* .tm_min  = */ minutes,
      /* .tm_hour = */ hour,
      /* .tm_mday = */ day,
      /* .tm_mon  = */ month - 1,
      /* .tm_year = */ year - 1900
    };
    tm.tm_isdst = -1; // Use DST value from local time zone
    return EventTime(std::chrono::system_clock::from_time_t(std::mktime(&tm)) + std::chrono::milliseconds(milliseconds));
  }
  
  std::ostream& operator<<(std::ostream& output, const EventTime& event_time)
  {
    time_t t = std::chrono::system_clock::to_time_t(event_time.m_event_time);
    #pragma warning(suppress : 4996)
    std::tm* tm = localtime(&t);
  
    output << (tm->tm_year + 1900)
           << "-"
           << std::setw(2) << std::setfill('0') << (tm->tm_mon + 1)
           << "-"
           << std::setw(2) << std::setfill('0') << tm->tm_mday
           << " "
           << std::setw(2) << std::setfill('0') << tm->tm_hour
           << ":"
           << std::setw(2) << std::setfill('0') << tm->tm_min
           << ":"
           << std::setw(2) << std::setfill('0') << tm->tm_sec
           << "."
           << std::setw(3) << (floor<std::chrono::milliseconds>(event_time.m_event_time - floor<std::chrono::seconds>(event_time.m_event_time)).count());
  
    return output;
  }
  
  // vvv--- YOU CAN PUT ADDITIONAL DEFINITIONS BELOW
  
  // ^^^--- END OF USER DEFINED DEFINITIONS

} // end Common

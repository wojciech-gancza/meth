// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/test-of-generated-code/test_the_door.cpp
// and it is generated by:      .../test.py[104]
// based on pattern file:       .../patterns/state.machine.cpp.body.pattern
// wrapped by pattern:          .../patterns/common.main.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------

#include "test_the_door.h"

// vvv--- YOU CAN PUT ADDITIONAL INCLUDES BELOW

// ^^^--- END OF USER DEFINED INCLUDES

namespace Test
{
  void TheDoor::Closed::process_event(Event event, TheDoor& the_door)
  {
    switch( event )
    {
      case OPEN:
        the_door.turn_the_knob_and_pull();
        the_door.m_current_state = &the_door.m_opened;
        break;
    
      case LOCK:
        if ( the_door.key_match() )
        {
          the_door.m_current_state = &the_door.m_locked;
          the_door.lock_with_key();
        }
        break;
    }
  }
  
  void TheDoor::Opened::process_event(Event event, TheDoor& the_door)
  {
    switch( event )
    {
      case CLOSE:
        the_door.do_not_allow_to_enter();
        the_door.m_current_state = &the_door.m_closed;
        break;
    }
  }
  
  void TheDoor::Locked::process_event(Event event, TheDoor& the_door)
  {
    switch( event )
    {
      case UNLOCK:
        if ( the_door.key_match() )
        {
          the_door.m_current_state = &the_door.m_closed;
        }
        if ( the_door.use_crowbar() )
        {
          the_door.m_current_state = &the_door.m_broken;
          the_door.opened_with_force();
        }
        break;
    }
  }
  
  void TheDoor::Broken::process_event(Event event, TheDoor& the_door)
  {
    
  }
  
  // -----------------------------------
  
  void TheDoor::do_not_allow_to_enter()
  {
    // vvv--- Implementation of do_not_allow_to_enter functionality
    
    // ^^^--- End of implementation of do_not_allow_to_enter
  }
  
  bool TheDoor::key_match()
  {
    // vvv--- Implementation of key_match functionality
    return false;
    // ^^^--- End of implementation of key_match
  }
  
  void TheDoor::lock_with_key()
  {
    // vvv--- Implementation of lock_with_key functionality
    
    // ^^^--- End of implementation of lock_with_key
  }
  
  void TheDoor::opened_with_force()
  {
    // vvv--- Implementation of opened_with_force functionality
    
    // ^^^--- End of implementation of opened_with_force
  }
  
  void TheDoor::turn_the_knob_and_pull()
  {
    // vvv--- Implementation of turn_the_knob_and_pull functionality
    
    // ^^^--- End of implementation of turn_the_knob_and_pull
  }
  
  bool TheDoor::use_crowbar()
  {
    // vvv--- Implementation of use_crowbar functionality
    return false;
    // ^^^--- End of implementation of use_crowbar
  }
  
  // vvv--- TheDoor additional fields and methods
  
  // ^^^--- End of TheDoor additional fields and methods

} // end Test

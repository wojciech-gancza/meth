// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/test-of-generated-code/test_just_a_record.h
// and it is generated by:      .../test.py[97]
// based on pattern file:       .../patterns/record.h.body.pattern
// wrapped by pattern:          .../patterns/source.h.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------

#pragma once

#include <cstdint>
#include <string>
#include <iostream>

#include "common_severity.h"
#include "acoustic_selected_output_ids.h"
#include "common_network_port_number.h"
#include "serialization_binary_serialization.h"

// -vvv YOU CAN PUT ADDITIONAL INCLUDES BELOW

// -^^^ END OF USER DEFINED INCLUDES

namespace Test
{
  class JustARecord 
    : public Common::Severity
    , public Acoustic::SelectedOutputIds
    , public Common::Network::PortNumber
  {
    public:
      // type traits
      static constexpr const char* class_name = { "Test::JustARecord" };
      static constexpr bool is_compareable = { true };
      static constexpr bool is_ordered = { true };
  
      typedef std::unique_ptr<JustARecord> Owner;
  
      JustARecord() = default;
  
      JustARecord(const JustARecord& just_a_record) noexcept
      : Common::Severity(just_a_record)
      , Acoustic::SelectedOutputIds(just_a_record)
      , Common::Network::PortNumber(just_a_record)
      {  }
  
      JustARecord(JustARecord&& just_a_record) noexcept
      : Common::Severity(just_a_record)
      , Acoustic::SelectedOutputIds(just_a_record)
      , Common::Network::PortNumber(just_a_record)
      {  }
  
      JustARecord(const Common::Severity& common_severity,
                  const Acoustic::SelectedOutputIds& acoustic_selected_output_ids,
                  const Common::Network::PortNumber& common_network_port_number) noexcept
      : Common::Severity(common_severity)
      , Acoustic::SelectedOutputIds(acoustic_selected_output_ids)
      , Common::Network::PortNumber(common_network_port_number)
      {  }
  
      JustARecord(Common::Severity&& common_severity,
                  Acoustic::SelectedOutputIds&& acoustic_selected_output_ids,
                  Common::Network::PortNumber&& common_network_port_number) noexcept
      : Common::Severity(common_severity)
      , Acoustic::SelectedOutputIds(acoustic_selected_output_ids)
      , Common::Network::PortNumber(common_network_port_number)
      {  }
  
      template <class OTHER>
      void setFrom(const OTHER& other)
      {
        if constexpr(std::is_base_of_v<Common::Severity, OTHER>)
        {
          Common::Severity::setFrom(other);
        }
        else if constexpr(std::is_base_of_v<OTHER, Common::Severity>)
        {
          Common::Severity::setFrom(other);
        }
        if constexpr(std::is_base_of_v<Acoustic::SelectedOutputIds, OTHER>)
        {
          Acoustic::SelectedOutputIds::setFrom(other);
        }
        else if constexpr(std::is_base_of_v<OTHER, Acoustic::SelectedOutputIds>)
        {
          Acoustic::SelectedOutputIds::setFrom(other);
        }
        if constexpr(std::is_base_of_v<Common::Network::PortNumber, OTHER>)
        {
          Common::Network::PortNumber::setFrom(other);
        }
        else if constexpr(std::is_base_of_v<OTHER, Common::Network::PortNumber>)
        {
          Common::Network::PortNumber::setFrom(other);
        }
      }
  
      template <class OTHER>
      void setFrom(OTHER&& other)
      {
        if constexpr(std::is_base_of_v<typename std::remove_reference<OTHER>::type, Common::Severity>)
        {
          Common::Severity::setFrom(other);
        }
        else if constexpr(std::is_base_of_v<Common::Severity, typename std::remove_reference<OTHER>::type>)
        {
          Common::Severity::setFrom(other);
        }
        if constexpr(std::is_base_of_v<typename std::remove_reference<OTHER>::type, Acoustic::SelectedOutputIds>)
        {
          Acoustic::SelectedOutputIds::setFrom(other);
        }
        else if constexpr(std::is_base_of_v<Acoustic::SelectedOutputIds, typename std::remove_reference<OTHER>::type>)
        {
          Acoustic::SelectedOutputIds::setFrom(other);
        }
        if constexpr(std::is_base_of_v<typename std::remove_reference<OTHER>::type, Common::Network::PortNumber>)
        {
          Common::Network::PortNumber::setFrom(other);
        }
        else if constexpr(std::is_base_of_v<Common::Network::PortNumber, typename std::remove_reference<OTHER>::type>)
        {
          Common::Network::PortNumber::setFrom(other);
        }
      }
  
      bool operator==(const JustARecord& just_a_record) const noexcept;
      bool operator!=(const JustARecord& just_a_record) const noexcept;
      bool operator<(const JustARecord& just_a_record) const noexcept;
      bool operator<=(const JustARecord& just_a_record) const noexcept;
      bool operator>=(const JustARecord& just_a_record) const noexcept;
      bool operator>(const JustARecord& just_a_record) const noexcept;
  
      std::string toString() const;
      
      friend std::ostream& operator<<(std::ostream& output, const JustARecord& just_a_record);
      
      friend Serialization::BinarySerializer& operator<<(Serialization::BinarySerializer& serializer, const JustARecord& just_a_record);
      friend Serialization::BinaryDeserializer& operator>>(Serialization::BinaryDeserializer& deserializer, JustARecord& just_a_record);
  
      // -vvv YOU CAN PUT ADDITIONAL CLASS ELEMENTS BELOW
  
      // -^^^ END OF USER DEFINED CLASS ELEMENTS
  };
} // end Test

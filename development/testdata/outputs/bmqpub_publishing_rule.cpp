// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../development/testdata/outputs/bmqpub_publishing_rule.cpp
// and it is generated by:      .../generator.py[171]
// based on pattern file:       .../patterns/enum.cpp.body.pattern
// wrapped by pattern:          .../patterns/common.main.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------

#include <sstream>
#include "bmqpub_publishing_rule.h"
#include "../../test-of-generated-code/common_conversion_error.h"

// vvv--- YOU CAN PUT ADDITIONAL INCLUDES BELOW

// ^^^--- END OF USER DEFINED INCLUDES

namespace Bmqpub
{
  std::string PublishingRule::toString() const
  {
    std::ostringstream string_representation;
    string_representation << *this;
    return string_representation.str();
  }
  
  PublishingRule PublishingRule::fromString(const std::string& text)
  {
    ePublishingRule possible_result = convertTextToPossibleEnum(text);
    if (m_publishing_rule_names[possible_result] == text)
    {
      return PublishingRule(possible_result);
    }
    else
    {
      throw Common::ConversionError(text, "cannot be interpreted as Bmqpub::PublishingRule");
    }
  }
  
  std::ostream& operator<<(std::ostream& output, const PublishingRule& publishing_rule)
  {
    output << PublishingRule::m_publishing_rule_names[publishing_rule.m_publishing_rule];
    return output;
  }
  
  const char* PublishingRule::m_publishing_rule_names[] = {
    "UNKNOWN",
    "VALIDONCE",
    "VALIDALWAYS",
    "ANYALWAYS"
  };
  
  PublishingRule::ePublishingRule PublishingRule::convertTextToPossibleEnum(const std::string& text) noexcept
  {
    if (text.length() < 7)
    {
      return E_ANYALWAYS;
    }
    switch (text[0])
    {
      case 'A':
        return E_ANYALWAYS;
      case 'U':
        return E_UNKNOWN;
      default:
      {
        if (text.length() < 9)
        {
          return E_VALIDALWAYS;
        }
        if (text[5] == 'A')
        {
            return E_VALIDALWAYS;
        }
        else
        {
            return E_VALIDONCE;
        }
      }
    }
  }
  
  // vvv--- YOU CAN PUT ADDITIONAL CODE BELOW
  
  // ^^^--- END OF USER DEFINED CODE

} // end Bmqpub

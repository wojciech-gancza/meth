// --------------------------------------------------------------------------------------
// File generated by metamorph meth code generator. File may be modified only inside 
// specially marked code blocks. Only such code can survive during subsequent generation 
// of the file. All other modification can be overwritten when generator is started.
// --------------------------------------------------------------------------------------
// This file is stored at:      .../testdata/outputs/common_network_port_number.h
// and it is generated by:      .../test.py[64]
// based on pattern file:       .../patterns/source.file.pattern
// where code_body_pattern is:  .../patterns/integer.h.body.pattern
// (where '...' is solution root path)
// --------------------------------------------------------------------------------------

#pragma once

namespace Common
{
  namespace Network
  {
    class PortNumber
    {
      public:
        explicit PortNumber(uint16_t port_number) noexcept;
        PortNumber() noexcept;
        PortNumber(const PortNumber& port_number) noexcept;
    
        uint16_t getPortNumberAsInteger() const noexcept;
        void setPortNumber(uint16_t port_number) noexcept;
    
        PortNumber& operator=(const PortNumber& port_number) noexcept;
    
        bool operator==(const PortNumber& other) const noexcept;
        bool operator!=(const PortNumber& other) const noexcept;
        bool operator<(const PortNumber& other) const noexcept;
        bool operator>(const PortNumber& other) const noexcept;
        bool operator<=(const PortNumber& other) const noexcept;
        bool operator>=(const PortNumber& other) const noexcept;
    
        std::string toString() const;
        static PortNumber fromString(const std::string& text);
    
        friend std::ostream& operator<<(std::ostream& out, const PortNumber& port_number);
    
        friend SerializationInterface& operator<<(SerializationInterface& serializer, const PortNumber& port_number);
        friend DeserializationInterface& operator>>(DeserializationInterface& deserializer, PortNumber& port_number);
    
      private:
        uint16_t m_port_number;
    };
  } // end Network
} // end Common

// Place your copyright here

// File generated by code metagenerator from
// - file: 	    ${output_file_name_and_path}
// - generator: ${generator_name_and_path}
// - template:  ${template_name_and_path}

${#IF use_strings_support}
#include <string>

${#END}
// -vvv additional includes and declarations could be written here

	// code written here will be preserved during future 
	// generation of this file 

// -^^^ end of manualy entered code

namespace ${namespace}
{
    class ${type_name}
	{
		public:
			enum e_${type_name} : ${base_type} 
			{
				${cpp_enum(enum_values).get_items_as_list('')}
			};		

${#IF use_strings_support}
			const char* const names[] = 
			{
				${cpp_enum(enum_values).get_items_as_list('\"')}
			}
		
${#END}
			${type_name}(e_${type_name} value = ${default_value}) explicit
			: 	m_${type_name} { value }
			{   }
			
			e_${type_name} get${type_name}() const
			{
				return m_${type_name};
			}
			
			void set${type_name}(e_${type_name} newValue)
			{
				m_${type_name} = newValue;
			}
			
${#IF use_strings_support}
			static ${type_name} from_string(const std::string& text)
			{
				${cpp_enum(enum_values).code_of_convert_from_string()}
			}

			std::string to_string() const
			{
				return names[static_cast<unsigned>(m_${type_name})];
			}
		
${#END}
			// -vvv additional methods could be written here
			
				// code written here will be preserved during future 
				// generation of this file 
			
			// -^^^ end of manualy entered code
			
		private:
			e_${type_name} m_${type_name};
	};
}

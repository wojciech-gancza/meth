${#INCLUDE _file_header.part}

#pragma once

${#IF export_definition_include}
#include "${export_definition_include}"

${#END}
#include <string>
#include <cstdint>
#include <bit>

namespace MethToolbox
{
  class ${#IF export_specifier}${export_specifier} ${#END}SerializationInterface
  {
    public:
      virtual ~SerializationInterface()
      {  }

      virtual void putByte(uint8_t byte) = 0;

      template <class INTEGER> void serializeInteger(const INTEGER& value)
      {
        if constexpr (std::endian::native == std::endian::big)
        {
          // Big-endian system
          uint8_t* bytes = reinterpret_cast<const uint8_t*>(&value);
          for (unsigned i = 0; i < sizeof(INTEGER); ++i)
          {
              putByte(bytes[i]);
          }
        }
        else
        {
          // Little endian system
          unsigned len = sizeof(INTEGER);
          const uint8_t* bytes = reinterpret_cast<const uint8_t*>(&value) + len - 1;
          while (len)
          {
            putByte(*bytes);
            --bytes;
            --len;
          }
        }
      }

      void serializeShortString(const std::string& text);
      void serializeLongString(const std::string& text);
      void serializeVeryLongString(const std::string& text);
  };
}

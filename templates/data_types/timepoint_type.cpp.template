${#INCLUDE _file_header.part}

#include "${header_file_name}"
#include "${tools_path}meth_toolbox_timepoints.h"

#include <iomanip>

// -vvv YOU CAN PUT ADDITIONAL INCLUDES BELOW

// -^^^ END OF USER DEFINED INCLUDES

namespace ${namespace} 
{
  std::ostream& operator<<(std::ostream& out, const ${namespace}::${class_name}& ${field_name})
  {
    time_t t = std::chrono::system_clock::to_time_t(timestamp.m_timestamp);
    std::tm tm;
    localtime_s(&tm, &t);

    out << ${serialization_code};

    return out;
  }

  ${class_name} ${class_name}::fromString(const std::string& text)
  {
${#FOR statement : string_readers_collection}
    ${statement}
${#END}

    std::tm tm = { 
      /* .tm_sec  = */ ${#IF use_seconds}seconds${#ELSE}0${#END},
      /* .tm_min  = */ ${#IF use_minutes}minutes${#ELSE}0${#END},
      /* .tm_hour = */ ${#IF use_hour}hour${#ELSE}0${#END},
      /* .tm_mday = */ ${#IF use_day}day${#ELSE}0${#END},
      /* .tm_mon  = */ ${#IF use_month}month - 1${#ELSE}0${#END},
      /* .tm_year = */ ${#IF use_year}year - 1900${#ELSE}0${#END}
    };
    tm.tm_isdst = -1; // Use DST value from local time zone
    return Timestamp(std::chrono::system_clock::from_time_t(std::mktime(&tm))${#IF use_milliseconds} + std::chrono::milliseconds(milliseconds)${#END});
  }

  // -vvv YOU CAN PUT ADDITIONAL IMPLEMENTATION PUBLIC METHODS HERE

  // -^^^ YOU CAN PUT ADDITIONAL IMPLEMENTATION PUBLIC METHODS HERE
} 

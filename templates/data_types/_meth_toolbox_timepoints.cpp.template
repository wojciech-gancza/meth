${#INCLUDE _file_header.part}

#include "meth_toolbox_timepoints.h"

#include "meth_toolbox_value_error.h"

// -vvv YOU CAN PUT ADDITIONAL INCLUDES HERE

// -^^^ END OF ADDITIONAL INCLUDES

namespace MethToolbox
{
  void Timepoints::ensureStaticTextExist(std::string::const_iterator& reader, std::string::const_iterator& limit, const char* pattern)
  {
    while (*pattern)
    {
      if (reader == limit || *reader != *pattern)
      {
        throw MethToolbox::ValueError();
      }
      ++reader;
      ++pattern;
    }
  }

  int Timepoints::readOneOrTwoDigitsNumber(std::string::const_iterator& reader, std::string::const_iterator& limit)
  {
    if (reader == limit)
    {
      throw MethToolbox::ValueError();
    }
    char digit = *reader++;
    if (!isdigit(digit))
    {
      throw MethToolbox::ValueError();
    }
    int value = digit - '0';
    if (reader != limit)
    {
      digit = *reader;
      if (isdigit(digit))
      {
        value = 10 * value + digit - '0';
        ++reader;
      }
    }
    return value;
  }

  int Timepoints::readTwoDigitsNumber(std::string::const_iterator& reader, std::string::const_iterator& limit)
  {
    if (reader == limit)
    {
      throw MethToolbox::ValueError();
    }
    char digit = *reader++;
    if (!isdigit(digit) || reader == limit)
    {
      throw MethToolbox::ValueError();
    }
    int value = digit - '0';
    digit = *reader++;
    if (!isdigit(digit))
    {
      throw MethToolbox::ValueError();
    }
    value = 10 * value + digit - '0';

    return value;
  }

  int Timepoints::readThreeDigitsNumber(std::string::const_iterator& reader, std::string::const_iterator& limit)
  {
    if (reader == limit)
    {
      throw MethToolbox::ValueError();
    }
    char digit = *reader++;
    if (!isdigit(digit) || reader == limit)
    {
      throw MethToolbox::ValueError();
    }
    int value = digit - '0';
    digit = *reader++;
    if (!isdigit(digit) || reader == limit)
    {
      throw MethToolbox::ValueError();
    }
    value = 10 * value + digit - '0';
    digit = *reader++;
    if (!isdigit(digit))
    {
      throw MethToolbox::ValueError();
    }
    value = 10 * value + digit - '0';

    return value;
  }

  int Timepoints::readFourDigitsNumber(std::string::const_iterator& reader, std::string::const_iterator& limit)
  {
    if (reader == limit)
    {
      throw MethToolbox::ValueError();
    }
    char digit = *reader++;
    if (!isdigit(digit) || reader == limit)
    {
      throw MethToolbox::ValueError();
    }
    int value = digit - '0';
    digit = *reader++;
    if (!isdigit(digit) || reader == limit)
    {
      throw MethToolbox::ValueError();
    }
    value = 10 * value + digit - '0';
    digit = *reader++;
    if (!isdigit(digit) || reader == limit)
    {
      throw MethToolbox::ValueError();
    }
    value = 10 * value + digit - '0';
    digit = *reader++;
    if (!isdigit(digit))
    {
      throw MethToolbox::ValueError();
    }
    value = 10 * value + digit - '0';

    return value;
  }

  // -vvv YOU CAN PUT ADDITIONAL COMPARISION HERE

  // -^^^ END OF USER DEFINED COMPARATORS
}

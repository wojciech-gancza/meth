${#INCLUDE _file_header.part}

#pragma once

${#IF export_definition_include}
#include "${export_definition_include}"

${#END}
#include <string>
#include <cstdint>
#include <bit>

namespace MethToolbox
{
  class ${#IF export_specifier}${export_specifier} ${#END}DeserializationInterface
  {
    public:
      virtual ~DeserializationInterface()
      {  }

      virtual uint8_t getByte() = 0;

      template <class INTEGER> void deserializeInteger(INTEGER& value)
      {
        if constexpr (std::endian::native == std::endian::big)
        {
          // Big-endian system
          uint8_t* bytes = reinterpret_cast<uint8_t*>(&value);
          for (unsigned i = 0; i < sizeof(INTEGER); ++i)
          {
              bytes[i] = getByte();
          }
        }
        else
        {
          // Little endian system
          unsigned len = sizeof(INTEGER);
          uint8_t* bytes = reinterpret_cast<uint8_t*>(&value) + len - 1;
          while (len)
          {
            *bytes = getByte();
            --bytes;
            --len;
          }
        }
      }

      void deserializeShortString(std::string& text);
      void deserializeLongString(std::string& text);
      void deserializeVeryLongString(std::string& text);
  };
};
